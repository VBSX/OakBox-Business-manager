import sqlite3
from consulta_horario_sys import HorarioDoSistema


class EnvioBanco:
    def __init__(self, nome_produto, nome_da_loja):
        self.nome_produto = nome_produto
        self.nome_da_loja = nome_da_loja
        self.sys_date = HorarioDoSistema()
        self.data_agora = self.sys_date.get_data_sistema()
        self.hora_agora = self.sys_date.get_horario_sistema()
        self.banco = sqlite3.connect('banco.db')
        self.cursor = self.banco.cursor()

    def fechar_banco(self):
        self.banco.close()

    def send_dados_para_o_banco_tabela_dos_precos(self, preco_atual):
        try:
            self.preco_atual = preco_atual
            self.cursor.execute(
                "CREATE TABLE IF NOT EXISTS valores_dos_sites (produto text, cotacao text, loja text, "
                "data_consulta numeric, hora_consulta numeric) ")
            self.cursor.execute(
                "INSERT INTO valores_dos_sites (produto, cotacao, loja, data_consulta, hora_consulta) "
                "VALUES ('" + self.nome_produto + "','" + self.preco_atual + "', '" + self.nome_da_loja + "', '" +
                self.data_agora + "', '" + self.hora_agora + "')")
            self.banco.commit()
            self.fechar_banco()
            
            return print('\ndados cadastrados no banco;')

        except sqlite3.Error as erro:
            print("Erro ao inserir os dados: ", erro)
            
            return erro

    def send_dados_tabela_cadastro_de_produtos(self, id_do_produto, link_do_produto):
        self.link_do_produto = link_do_produto
        self.id_do_produto = id_do_produto
        try:
            self.cursor.execute(
                "INSERT INTO dados_dos_sites (id_cadastro, produto, url, loja) values "
                "('" + self.id_do_produto + "', '" + self.nome_produto + "', '" +
                self.link_do_produto + "', '" + self.nome_da_loja + "')")
            self.banco.commit()
            self.fechar_banco()
            
        except sqlite3.Error as erro:
            print("Erro ao inserir os dados: ", erro)
            
            return erro


class ConsultaBanco:
    def __init__(self, id_do_cadastro):
        self.erro_log = Criarlog()
        self.banco = sqlite3.connect('dados_dos_sites.db')
        self.loja_consulta = 'pichau'
        self.hora_consulta = '22:38:00'
        self.id_do_cadastro = id_do_cadastro

    def fechar_banco(self):
        self.banco.close()

    def get_prices_of_products(self,product_searched, initial_consult_date,final_consult_date):
        cursor_get_price = self.banco.cursor()
        cursor_get_price.execute(
            f"SELECT cotacao,produto,data_consulta FROM valores_dos_sites WHERE produto LIKE '%{product_searched}%' "
            f"AND data_consulta BETWEEN '{initial_consult_date}' AND '{final_consult_date}'")
        data_database = cursor_get_price.fetchall()

        return data_database

    def get_produto_nome_banco(self):
        try:
            self.cursor_get_nome_produto = self.banco.cursor()
            self.cursor_get_nome_produto.execute(
                f"SELECT produto FROM dados_dos_sites WHERE id_cadastro = '{self.id_do_cadastro}'")
            self.retornar_dado_produto = self.cursor_get_nome_produto.fetchall()

            return self.retornar_dado_produto

        except sqlite3.Error as erro:
            self.erro_log.criar_txt_log(
                f"Erro ao retornar dados do nome produto na coluna "
                f"id_cadastro, produto numero: {self.id_do_cadastro}, codigo do erro {erro}")
            print(
                f"\nErro ao retornar dados do nome produto na "
                f"coluna id_cadastro, produto numero: {self.id_do_cadastro}, codigo do erro ",
                erro)
            self.fechar_banco()
            
            return erro

    def get_url_produto_banco(self):
        try:
            self.cursor_get_url_produto = self.banco.cursor()
            self.cursor_get_url_produto.execute(
                f"SELECT url FROM dados_dos_sites WHERE id_cadastro = '{self.id_do_cadastro}'")
            self.retornar_dado_url = self.cursor_get_url_produto.fetchall()

            return self.retornar_dado_url

        except sqlite3.Error as erro:
            print(
                f"\nErro ao retornar dados da url na "
                f"coluna id_cadastro, produto numero: {self.id_do_cadastro}, codigo do erro ",
                erro)

            return self.erro_log.criar_txt_log(
                f"Erro ao retornar dados da url na "
                f"coluna id_cadastro, produto numero: {self.id_do_cadastro}, codigo do erro {erro}")

    def get_loja_produto_banco(self):
        try:
            self.cursor_get_loja_produto = self.banco.cursor()
            self.cursor_get_loja_produto.execute(
                f"SELECT loja FROM dados_dos_sites WHERE id_cadastro = '{self.id_do_cadastro}'")
            self.retornar_dado_loja = self.cursor_get_loja_produto.fetchall()

            return self.retornar_dado_loja

        except sqlite3.Error as erro:
            print(
                f"Erro ao retornar dados da url na "
                f"coluna id_cadastro, produto numero: {self.id_do_cadastro}, codigo do erro ",
                erro)

            return self.erro_log.criar_txt_log(
                f"Erro ao retornar dados da url "
                f"na coluna id_cadastro, produto numero: {self.id_do_cadastro}, codigo do erro {erro}")
